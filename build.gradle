/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.7.4'
    id 'io.spring.dependency-management' version "1.0.11.RELEASE" //spring的依赖管理插件
//    id "org.jetbrains.kotlin.jvm" version '1.7.20'
}

ext {
    // 定义变量
    junitVersion = '4.13.2'
    springBootVersion = '2.4.2'
    springCloudVersion = '2020.0.2'
    springCloudAlibabaVersion = '2021.1'
    nacosVersion = "2.0.1"
    seataVersion = "1.4.2"
    springCloudContextVersion = "3.0.2"
    nacosConfigVersion = "2021.1"
    hutoolVersion = "5.5.8"
    mbpVersion = "3.3.0"
    esVersion = "7.9.1"
    rocketMqVersion = "2.2.0"
    orikaVersion = "1.5.4"
    openFeignVersion = "10.10.1"
    knife4jVersion = "3.0.2"
}

allprojects {
    group = 'org.slamacraft.hnuc'
    version = '0.0.1-SNAPSHOT'
    description = 'apiTestKt'

    apply plugin: 'java'
    apply plugin: 'maven-publish'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        mavenCentral()
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from(components.java)
            }
        }
    }
}

task setupDependencies{

}

subprojects {

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management' // 引入插件

    // 子模块依赖管理
    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.boot:spring-boot-starter-parent:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
            mavenBom("com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}")
            // 工具类
            mavenBom("cn.hutool:hutool-core:${hutoolVersion}")
            mavenBom("cn.hutool:hutool-http:${hutoolVersion}")
            mavenBom("cn.hutool:hutool-crypt:${hutoolVersion}")
            mavenBom "ma.glasnost.orika:orika-core:${orikaVersion}"
            // 数据库
            mavenBom("com.baomidou:mybatis-plus-boot-starter:${mbpVersion}")
            // swagger
            mavenBom("com.github.xiaoymin:knife4j-spring-boot-starter:${knife4jVersion}")
            mavenBom("com.github.xiaoymin:knife4j-micro-spring-boot-starter:${knife4jVersion}")
            // ES
            mavenBom "org.elasticsearch.client:elasticsearch-rest-high-level-client:${esVersion}"
            mavenBom "org.elasticsearch:elasticsearch:${esVersion}"
            mavenBom "org.elasticsearch.client:elasticsearch-rest-client:${esVersion}"
            // MQ
            mavenBom "org.apache.rocketmq:rocketmq-spring-boot-starter:${rocketMqVersion}"
        }
    }

    // 子模块通用依赖
    dependencies {
        implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap:3.1.4' // 识别bootstrap.yml文件
        implementation "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion"
//        implementation "org.springframework.boot:spring-boot-starter-web-services:$springBootVersion"
//        implementation "org.springframework.cloud:spring-cloud-alibaba:$springCloudAlibabaVersion"
//        implementation("com.alibaba.nacos:nacos-client:${nacosVersion}")

        // 日志
        implementation("log4j:log4j:1.2.17")

        // 编译
        compileOnly("org.projectlombok:lombok:1.18.26")
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.26'

        implementation("com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery:${nacosConfigVersion}")

        runtimeOnly "org.springframework.boot:spring-boot-devtools:$springBootVersion"

        testImplementation "junit:junit:$junitVersion"

        testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    }
}